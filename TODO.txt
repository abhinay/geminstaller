* Application should not do any remote operations (or anything, really) if the version and platform are non-ambiguous and already installed.
* Add support for multiple config files (last ones win)
* Handle gems with "CURRENT" platform
* get 100% code coverage
* ensure --debug install option works as expected
* Rename local_gem_server to embedded_gem_server
* remove cruft from test output
* Remove hoe as a dependency for stubgems
* Use a logger, hook it into --info/verbose option
* add more output for --info option.  Should also be able to check info flag from classes other than Application
* rename is_gem_installed to is_gem_installed?
* rake test fails on linux (problems starting embedded gem server)
* clean out all old warnings about having to start local gem server
* Add additional dependencies and versions in Hoe, add dependency on Hoe, RubyForge
* fix all Zentest warnings
* Rename RubyGem class to RubyGemAction, add install vs. uninstall actions in config (install is default)
* Automate process for creating a stubgem
* Look into using RubyGems built in dependency support rather than home-grown solution
* Make GemInstaller.run take a parameter to not fail if there is any error
* Give nice error message if gem server is unavailable (check socket)
* Make tests run under RadRails debugger
* Rename GemInstaller::Runner to GemInstaller::GemInstaller
* Define procedure to invoke programatically via rails and non-rails
* Document simple example (command line, rails, non-rails) in README.txt
* handle unsupported gem install options - for example, -t gives uninitialized constant Gem::Validator
* update info in stubgem (not sow defaults)
* Run embedded gem_server for tests at nonstandard (not 8808) port
* Make SourceIndex.search use alternate method that does exact regex match, to avoid passing the exact regex ourselves.
* Fix errors when using relative or ~/ dir in --config path
* add option to specify --backtrace on all gem commands
* Show warning if there is a more recent gem available (and the default?) in the repository
* -v option should show full stacktrace on errors
* add api support (simple to invoke from ruby)
* take --trace parameter to show full stack trace
* decide how to deal with sudo problem.  probably initially just tell people to add user and gem command to sudoers file with no password
* write basic rdoc instructions
* publish site
* upload gem 
* create basic website
* add feature to automatically warn if there is a more recent version of the gem available.
* Have tests install to temp dir instead of real gem repo (use FileUtils.rm_rf and Gem.use_paths, see rubygems doc_manager for example)
* auto-generate dependency file
