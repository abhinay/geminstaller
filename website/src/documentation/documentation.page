h1. Detailed Documentation

h2. Table of Contents

* "Setup":#setup
** "Requirements":#requirements
** "Installation":#installation
* "Command Line Options":#command_line_options
** "Command Line Options Summary":#command_line_options_summary
** "<code>--config</code> option":#config_option
** "<code>--geminstaller-output</code> option":#geminstaller_output_option
** "<code>--rubygems-output</code> option":#rubygems_output_option
** "<code>--print-rogue-gems</code> option":#print_rogue_gems_option
** "<code>--sudo</code> option":#sudo_option
** "<code>--silent</code> option":#silent_option
* "Unsuppressible Output":#unsuppressible_output
* "Using <code>erb</code> in config files":#using_erb_in_config_files
* "Automatic Platform Detection":#automatic_platform_detection
* "Dealing with sudo and root-owned RubyGem installations":#dealing_with_sudo 
** "Option 1 - Use the <code>-s</code>  or <code>--sudo</code> option on the <code>geminstaller</code> executable":#option_1
** "Option 2 - Run <code>sudo</code> or log in as root yourself":#option_2
** "Option 3 - Make everything owned by the local user that runs geminstaller":#option_3
** "Tips on configuring sudo":#tips_on_configuring_sudo


h2(#setup). Setup

h3(#requirements). Requirements

Runtime Requirements:
* None. There are no dependencies required to run GemInstaller, other than an installation of RubyGems itself

Build/Test requirements:
* GemInstaller has a geminstaller.yml file to specify it's own dependencies.  After installing the geminstaller gem (via 'gem install geminstaller'), change to the root of the geminstaller source tree, and run 'geminstaller' to auto-install the dependencies.

h3(#installation). Installation

*Installing Latest Release:*  Run <code>'gem install geminstaller'</code> to install GemInstaller from RubyForge.  Run it via <code>'sudo'</code> if necessary, but first read the section on sudo (TODO: add link).

*Installing Source Distribution:*  Run <code>'rake install_gem'</code> from the root of the GemInstaller source tree.  This assumes that Hoe and other required build/test dependencies are installed.  Note this currently won't work on windows because Hoe always tries to run sudo.  It will generate a pkg/geminstaller-version.gem file, though, which you can install with the <code>'gem install <pkgfile>'</code> command.  

h2(#command_line_options). Command Line Options

h3(#command_line_options_summary). Command Line Options Summary

<pre>
$ geminstaller --help
Usage: geminstaller [options]

    -c, --config=CONFIGPATHS         Comma-delimited path(s) to GemInstaller config file(s).
    -g, --geminstaller-output=TYPES  Comma-delimited list of output types to show from GemInstaller.
                                       Examples:
                                         --gall
                                         --geminstaller-output=error,install,commandecho
                                       Default: error,install,info
                                       Valid types:
                                         - none:        print only fatal errors
                                         - error:       print error messages
                                         - install:     print install messages
                                         - info:        print informational messages
                                         - commandecho: print rubygems commands as they are invoked
                                         - debug:       print debug messages
                                         - all:         print all messages
    -h, --help                       Show this message.
    -p, --print-rogue-gems           Print a report of all locally installed gems which are not specified
                                     in the geminstaller config file.
    -r, --rubygems-output=TYPES      Comma-delimited list of output types to show from internal:
                                       RubyGems command invocation.
                                       Examples:
                                         --rall
                                         --rubygems-output=stderr
                                       Default: stderr
                                       Valid types:
                                         - none:        print no output
                                         - stdout:      print standard output stream
                                         - stderr:      print standard error stream
                                         - all:         print all output
    -s, --sudo                       Perform all gem operations under sudo (as root).  Will only work on
                                     correctly configured, supported systems.  See docs for more info.
    -t, --silent                     Suppress all output except fatal exceptions, and output from
                                     rogue-gems option.
    -v, --version                    Show GemInstaller version.
</pre>

h3(#config_option). <code>--config</code> option

By default, GemInstaller will look for a config file named <code>geminstaller.yml</code> in the working directory.  The <code>'--config'</code> option allows you to override this with a different file name or path.  You can also have multiple comma-delimited paths to custom-named config files.  This is useful if you have multiple projects, and want them to share a common config file, but still have project-specific overrides.  You could also have a standard set of gems across multiple systems, with additional custom gems specified by individual projects.  The last entries in the list will override the first ones.  For example: 

<pre>
geminstaller --config=../common-config/geminstaller-common-across-projects.yml,geminstaller-custom-for-myproject.yml
</pre>

h3(#geminstaller_output_option). <code>--geminstaller-output</code> option

The <code>--geminstaller-output</code> option controls what GemInstaller prints out about it's internal activity.  It is a comma-delimited list (no spaces), which can specify any of these output types:

* none: Prints only fatal errors/exceptions which cause geminstaller to fail.  The same as specifying none of the other types.
* error: Prints error messages.
* install: Prints messages indicating when gems are going to be installed.  This may be gems which are directly specified in a GemInstaller config file, or dependency gems which are automatically installed to meet the requirments of a dependent gem.
* info: Prints informational messages.
* commandecho: Print rubygems commands as they are automatically invoked by GemInstaller.
* debug: Prints debug messages
* all: Prints all messages.  This is the same as specifying all of the other types (except 'none')

This option works in conjuntion the <code>--rubygems-output</code>, which is used similarly, but controls output which is generated by RubyGems itself.

h3(#rubygems_output_option). <code>--rubygems-output</code> option

GemInstaller works by automatically invoking RubyGems commands.  The <code>--rubygems-output</code> option controls what types of output from RubyGems is printed out.  It is a comma-delimited list (no spaces), which can specify any of these output types:

* none: Prints no output from RubyGems.  
* stdout: Prints standard output stream from RubyGems.
* stderr: Prints standard error stream from RubyGems.
* all: Prints all messages.  This is the same as specifying all of the other types (except 'none')

h3(#print_rogue_gems_option). <code>--print-rogue-gems</code> option

The <code>--print-rogue-gems</code> option prints a report of all locally installed gems which are not specified in the active loaded GemInstaller config file(s).  GemInstaller, being "Narcissistic Software" (tm), considers these "rogue gems".  The output format is in YAML, so it can be cut and pasted directly into an existing config file.  This allows you to bootstrap a new system, by creating an empty config file with no gems specified, and running geminstaller with the <code>--print-rogue-gems</code> option to identify all gems which are currently installed on the system.  It can also be used to identify gems which were manually installed without being entered into a GemInstaller config.  

h3(#sudo_option). <code>--sudo</code> option

The <code>--sudo</code> option runs GemInstaller as root by using the <code>sudo</code> command.  This command is neither valid nor necessary on Windows platforms.  See the "Dealing with sudo and root-owned RubyGem installations":#dealing_with_sudo section for more details.

h3(#silent_option). <code>--silent</code> option

The <code>--silent</code> option suppresses all RubyGems output except fatal errors/exceptions.  It overrides the <code>--geminstaller-output</code> and <code>--rubygems-output</code> options.

h2(#unsuppressible_output). Unsuppressible Output

Sometimes, errors from RubyGems activity will still be printed even if the <code>'--geminstaller-output=none'</code> or <code>--silent</code> options are specified.  This usually due to some failure when building gem docs, or on a windows platform.  This is probably due to a gem directly printing to stderr or stdout.  GemInstaller does not currently capture this type of output, only messages which are directly generated by RubyGems itself.  This may be fixed in a later release.

h2(#using_erb_in_config_files). Using <code>erb</code> in config files

The GemInstaller config file(s) are also run through erb, so you can embed any custom ruby code to dynamically generate portions of your config.  This can be used to have the same config file select gems differently on different platforms or environments.  Below is an example of using erb to detect and choose the platform.  This is necessary with some gems, even though GemInstaller attempts to guess at the platform.  See "Automatic Platform Detection":#automatic_platform_detection for more info.

    <pre>
\---
# geminstaller-detect-platform.yml
gems:
- name: x10-cm17a
  version: '> 1.0.0'
  platform: <%= RUBY_PLATFORM =~ /mswin/ ? 'i386-mswin32' : 'ruby'%>
</pre>

h2(#automatic_platform_detection). Automatic Platform Detection

TODO: write this section

h2(#dealing_with_sudo). Dealing with sudo and root-owned RubyGem installations 

If you only run geminstaller on Windows, you don't have to worry about this section :)

On many unix-like systems (Mac, Linux, etc.), the root user will own the local installation of RubyGems and/or the executable directory where gem executables are installed (often /usr/local/bin).  If this is the case, then gems must be installed and uninstalled by the root user, or via the sudo command.  This presents a problem for geminstaller, which must have this same permission to automatically install gems.

There are several different solutions this problem.  The solutions that are available are also determined by the way you use geminstaller (whether you call it from the executable, or use the GemInstaller classes directly from Ruby).

A transparent solution to this problem is planned as an enhancement to a future release of GemInstaller.  For now, however, you will need to pick one of the following approaches below.  If you use sudo, you should also read the docs on configuring sudo.

h3(#option_1). Option 1 - Use the <code>-s</code>  or <code>--sudo</code> option on the <code>geminstaller</code> executable

Examples:
<pre>
$ geminstaller -s
$ geminstaller --sudo
</pre>

h3(#option_2). Option 2 - Run <code>sudo</code> or log in as root yourself

Example of using sudo:
<pre>
$ sudo geminstaller
</pre>

Examples of running geminstaller as root
<pre>
$ su -      # if you can log in as root on your system, OR
$ sudo -s   # if you must use sudo to log in as root on your system 
# geminstaller
</pre>

h3(#option_3). Option 3 - Make everything owned by the local user that runs geminstaller

(replace <code><local user></code> with your username)
<pre>
$ cd /usr/local/lib/ruby # or wherever you have ruby installed
$ sudo chown -R <local user> .
</pre>

h3(#tips_on_configuring_sudo). Tips on configuring sudo

Sudo can be configured to not ask for a password for certain commands.  This will be useful if you want to run geminstaller against a root-owned gem repository without being prompted (such as a Rails app being deployed via Capistrano).

You should consult the man or info pages on sudoers and visudo for more info (<code>man sudoers</code> or <code>info sudoers</code>).  *** Make sure you understand the security implications of this approach ***.  

Here's an example of how <code>sudoers</code> might be configured to allow the local user to run the <code>'gem'</code>, <code>'ruby'</code>, and <code>'geminstaller'</code> commands via <code>sudo</code> without being prompted for a password.  Replace <code><local user></code> with your username, and replace '/usr/local/bin/' with the appropriate path if it is different on your system:

<pre>
$ sudo visudo
add this line:
<local user> ALL = NOPASSWD: /usr/local/bin/geminstaller, /usr/local/bin/ruby, /usr/local/bin/gem
</pre>

