---
title: Design
---
h1. Design Notes

These are some notes on the underlying design of GemInstaller, and the current state of development:

* GemInstaller was developed from nothing but a concept, using "Behavior-Driven Development":http://behaviour-driven.org and "Rspec":http://rspec.rubyforge.org/.
* GemInstaller uses "Dependency Injection", an architecture which has many benefits, including testability and enabling "loose coupling and high cohesion":http://www.c2.com/cgi/wiki?CouplingAndCohesion.  I originally started with "Needle":http://rubyforge.org/projects/needle/, a Ruby Dependency Injection framework, but switched to a simple home-grown approach in other to not have a dependency on the Needle gem.  Read more about Dependency Injection here:
** "http://onestepback.org/index.cgi/Tech/Ruby/DependencyInjectionInRuby.rdoc":http://onestepback.org/index.cgi/Tech/Ruby/DependencyInjectionInRuby.rdoc
** "http://onestepback.org/articles/depinj/":http://onestepback.org/articles/depinj/
** "http://martinfowler.com/bliki/InversionOfControl.html":http://martinfowler.com/bliki/InversionOfControl.html 
** "http://martinfowler.com/articles/injection.html":http://martinfowler.com/articles/injection.html
** "http://www.theserverside.com/tt/articles/article.tss?l=IOCBeginners":http://www.theserverside.com/tt/articles/article.tss?l=IOCBeginners
** "http://www.ibm.com/developerworks/edu/j-dw-java-springswing-i.html":http://www.ibm.com/developerworks/edu/j-dw-java-springswing-i.html
* A lot of effort has gone into supporting isolated functional testing.  Every run of a functional spec or the spec suite creates a new "Test Gem Home" sandbox installation of RubyGems.  This creates a new GEM_HOME on the fly for each run.  This allows me to test actual gem installation without being connected to a network, and avoid mucking with (or having false failures due to) my actual local RubyGems gem repository.  Unfortunately, the Ruby load path still uses the executables from the system installation of RubyGems.  I plan on fixing that too (which will allow me to test multiple RubyGems versions), but that seems to be a much trickier task than just having a different GEM_HOME.
* Spec/Test Philosophy:
** GemInstaller's specs are grouped into distinct categories.  This and other testing approaches I use are heavily influenced by this fine article at GroboUtils: "Naming Your Junit Tests":http://groboutils.sourceforge.net/testing-junit/art_naming.html 
** Unit vs. Functional: Many classes have two identically-named spec files associated with them, under unit and functional.  
*** Unit Specs:  The Unit specs for the most part test only a single class in isolation, usually using mock objects, so they run very fast.  Many of them are vestiges of my initial BDD approach when I started from nothing.  I incur a little bit of overhead cost to maintain them as the app evolves, but I don't mind that as much as some people :).  They also come in very handy when I want to BDD some new behavior and don't want to have the high "Test Gem Home" fixture creation overhead that the functional specs have.
*** Functional Specs:  These also have a one-to-one relationship with classes for the most part - geminstaller_spec is an exception.  Most of these test how groups of classes interact together at various levels.  Most of them use the "Test Gem Home" fixture approach.  This is effective, but adds several seconds to the startup of each run.  There is also overlap between some of them, especially at high levels of the API, which adds some maintenance overhead, but is worth it to me since it helps catch integration bugs.
*** Smoke Tests: There are some tests under /spec/smoketests which I run manually.  These are really coarse grained scripts, and don't use Rspec or Test::Unit.  They hit the live rubygems.org gem repository, and install/uninstall actual gems.  They are used as a periodic check to ensure that my "Test Gem Home" fixture approach is not masking any real-life bugs.
* I'm a proponent of high code coverage.  I check periodically to ensure I maintain close to 100% code coverage, not counting platform- and version-specific code blocks (and I'll get around to those some day).  Also, the sudo recursive invocation stuff still needs some tests, but that's a bit tricky to automate.
* The tests are flaky on Windows (but run fine on mac/linux).  The app itself runs fine, so I believe it's something related to spawning processes for the test GEM_HOME and EmbeddedGemServer.  I plan to look at this too, eventually.
* One of my motivations for creating GemInstaller was as an exercise to help me learn Ruby better.  If you see me doing anything obviously dumb or inefficient in the code or design, please let me know. Some of them I already know about, but haven't fixed, most I'm probably not aware of :)